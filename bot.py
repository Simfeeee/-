
import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv

from utils import fetch_news, format_post, send_post

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
POST_INTERVAL = int(os.getenv("POST_INTERVAL", 30))  # –≤ –º–∏–Ω—É—Ç–∞—Ö

dp = Dispatcher()
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")


@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("‚úÖ Skylibot –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.")


@dp.message(Command("–æ–±–Ω–æ–≤–∏—Ç—å"))
async def manual_update(message: Message):
    await message.answer("üîÑ –ò—â—É —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å...")

    news = await fetch_news()
    for item in news:
        if is_posted(item["link"]):
            continue
        try:
            text, image_url, keyboard = await format_post(item)
            await send_post(text, image_url, keyboard)
            add_posted_link(item["link"])
            break
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
    else:
        await message.answer("‚úÖ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")