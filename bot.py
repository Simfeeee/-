
import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv

from utils import fetch_news, format_post, send_post

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
POST_INTERVAL = int(os.getenv("POST_INTERVAL", 30))  # –≤ –º–∏–Ω—É—Ç–∞—Ö

dp = Dispatcher()
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")


@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("‚úÖ Skylibot –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.")


@dp.message(Command("–æ–±–Ω–æ–≤–∏—Ç—å"))
async def manual_update(message: Message):
    await message.answer("üîÑ –ü—É–±–ª–∏–∫—É—é –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å...")
    await process_news()


async def process_news():
    logging.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    news = await fetch_news()
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news)}")

    if news:
        item = news[0]  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å
        try:
            text, image_url, keyboard = await format_post(item)
            await send_post(text, image_url, keyboard)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")


async def scheduler():
    while True:
        await process_news()
        await asyncio.sleep(POST_INTERVAL * 60)


def run_bot():
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler())
    dp.run_polling(bot)
