import aiohttp
import feedparser
import openai
import os
import logging
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

async def fetch_news():
    urls = [
        "https://lenta.ru/rss",
        "https://meduza.io/rss/all",
        "https://www.bbc.com/news/world/rss.xml",
        "https://www.reuters.com/rssFeed/topNews",
    ]
    results = []
    for url in urls:
        feed = feedparser.parse(url)
        for entry in feed.entries[:3]:
            results.append({
                "title": entry.title,
                "link": entry.link,
                "summary": entry.summary,
                "image": entry.get("media_content", [{}])[0].get("url", None)
            })
    return results

async def format_post(item):
    openai.api_key = os.getenv("OPENAI_API_KEY")
    try:
        prompt = f"""–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {item['title']}
–û–ø–∏—Å–∞–Ω–∏–µ: {item['summary']}"""
        gpt_response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=200,
        )
        summary = gpt_response["choices"][0]["message"]["content"]
    except Exception as e:
        logging.warning(f"GPT –æ—à–∏–±–∫–∞: {e}")
        summary = item["summary"][:300] + "..."

    if not summary.strip():
        return None, None, None

    try:
        joke_prompt = f"–î–æ–±–∞–≤—å –∏—Ä–æ–Ω–∏—á–Ω—É—é –∏ —Å–º–µ—à–Ω—É—é –ø–æ–¥–ø–∏—Å—å –∫ –Ω–æ–≤–æ—Å—Ç–∏: {item['title']}"
        joke_response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": joke_prompt}],
            max_tokens=60,
        )
        joke = joke_response["choices"][0]["message"]["content"]
    except Exception:
        joke = "üß† –ü–æ–∫–∞ –±–µ–∑ —à—É—Ç–æ–∫. GPT —É—à—ë–ª –≤ –æ—Ç–ø—É—Å–∫."

    text = f"üì∞ <b>{item['title']}</b>\n\n{summary}\n\nü§ñ {joke}\n\n@fastnewsrussian üì°"

    image_url = item.get("image")

    # üì∑ –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ
    KEYWORD_OVERRIDES = {
        "–ü—É—Ç–∏–Ω": "Vladimir Putin",
        "–ó–µ–ª–µ–Ω—Å–∫–∏–π": "Zelensky",
        "–≤–æ–π–Ω–∞": "war",
        "–£–∫—Ä–∞–∏–Ω–∞": "Ukraine",
        "–ù–ê–¢–û": "NATO",
        "–¢—Ä–∞–º–ø": "Donald Trump",
        "–ú–∞—Å–∫": "Elon Musk",
        "–ò–ª–æ–Ω": "Elon Musk",
        "–ø–æ–∂–∞—Ä": "fire",
        "–ø—Ä–æ—Ç–µ—Å—Ç": "protest",
        "–∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ": "earthquake",
        "–≤—ã–±–æ—Ä—ã": "election",
        "—ç–∫–æ–Ω–æ–º–∏–∫–∞": "economy"
    }

    stopwords = {"–∏", "–≤", "–Ω–∞", "–æ", "–æ—Ç", "—Å", "–ø–æ", "—ç—Ç–æ", "–æ–Ω", "–æ–Ω–∞", "–æ–Ω–æ", "–Ω–æ–≤–æ—Å—Ç–∏", "–∫–∞–∫", "–∏–∑"}
    keyword = None

    for word in item['title'].split():
        clean = word.strip(".,!?\"'():").capitalize()
        if clean in KEYWORD_OVERRIDES:
            keyword = KEYWORD_OVERRIDES[clean]
            break
        if not keyword and clean.lower() not in stopwords:
            keyword = clean

    if not image_url and keyword:
        image_url = f"https://source.unsplash.com/800x600/?{keyword}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url="https://t.me/share/url?url=https://t.me/fastnewsrussian"),
         InlineKeyboardButton(text="‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/fastnewsrussian")]
    ])

    return text, image_url, keyboard

async def send_post(bot, channel_id, text, image_url=None, keyboard=None):
    try:
        if image_url:
            await bot.send_photo(chat_id=channel_id, photo=image_url, caption=text, reply_markup=keyboard)
        else:
            await bot.send_message(chat_id=channel_id, text=text, reply_markup=keyboard)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")