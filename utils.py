
import os
import aiohttp
import logging
import random
import feedparser
from bs4 import BeautifulSoup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import openai

async def generate_annotation(text):
    try:
        prompt = (
            "–ü—Ä–æ—á–∏—Ç–∞–π –Ω–æ–≤–æ—Å—Ç—å –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –∫–∞–∫ –≤ –°–ú–ò:
\n"
            f"{text}\n\n"
            "–í—ã–≤–æ–¥:"
        )
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=prompt,
            max_tokens=60,
            temperature=0.7,
        )
        return response.choices[0].text.strip()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è GPT –æ—à–∏–±–∫–∞: {e}")
        return random.choice(FAKE_ANNOTATIONS)

from aiogram import Bot

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_NICK = os.getenv("CHANNEL_NICK", "@fastnewsrussian")
CHAT_IDS = os.getenv("CHAT_IDS", os.getenv("CHAT_ID", "")).split(",")

FAKE_ANNOTATIONS = [
    "–í–æ—Ç —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç!",
    "–ö–ª–∞—Å—Å–∏–∫–∞ –∂–∞–Ω—Ä–∞.",
    "–ö–∞–∂–µ—Ç—Å—è, —Å–Ω–æ–≤–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–µ–Ω—å–∫–æ...",
    "–ù—É —Ç–∞–∫–æ–µ.",
    "–°–∞–º–∏ –≤ —à–æ–∫–µ.",
    "–û–Ω–∏ —Ç–∞–º —Å–æ–≤—Å–µ–º —É–∂–µ?",
    "–≠—Ç–æ —É–∂–µ –Ω–µ —Å–º–µ—à–Ω–æ.",
    "–ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ.",
    "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.",
    "–ù–æ–≤–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –º–µ–º.",
    "–ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–µ, –ò–ª–æ–Ω –ú–∞—Å–∫?",
]

KEYWORDS = [
    "–ü—É—Ç–∏–Ω", "–≤–∑—Ä—ã–≤", "–∑–∞–∫–æ–Ω", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–ß–ü", "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞", 
    "–∞—Ä–µ—Å—Ç", "–∞–≤–∞—Ä–∏—è", "—à—Ç—Ä–∞—Ñ", "–æ–±–ª–∞–≤–∞", "–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è", 
    "—Å–∞–Ω–∫—Ü–∏–∏", "–ø–æ–∂–∞—Ä", "—Å–º–µ—Ä—Ç—å", "—Ç–µ—Ä–∞–∫—Ç"
]

async def fetch_news():
    sources = [
        "https://lenta.ru/rss/news",
        "https://tass.ru/rss/v2.xml",
        "https://www.vedomosti.ru/rss/news",
        "https://www.rbc.ru/v10/news.rss",
        "https://ria.ru/export/rss2/archive/index.xml",
        "https://www.interfax.ru/rss.asp",
    ]
    news = []
    for url in sources:
        feed = feedparser.parse(url)
        for item in feed.entries:
            title = item.get("title", "")
            if any(keyword.lower() in title.lower() for keyword in KEYWORDS):
                news.append(item)
    return news[:30]

async def get_og_image(link):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(link, timeout=10) as resp:
                html = await resp.text()
                soup = BeautifulSoup(html, "html.parser")
                og_image = soup.find("meta", property="og:image")
                if og_image:
                    return og_image.get("content")
    except:
        return None

async def get_backup_image(query):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://source.unsplash.com/800x600/?{query}") as resp:
                return str(resp.url)
    except:
        return None






async def format_post(item):
    title = item.get("title", "")
    link = item.get("link", "")
    summary = item.get("summary", "") or title
    annotation = await generate_annotation(summary)

    formatted_text = (
        "‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî\n"
        f"üì¢ <b>{title}</b>\n\n"
        f"üß± {annotation}\n\n"
        f"üí• –≠—Ç–æ—Ç —Ñ–∞–∫—Ç —É–∂–µ –≤—ã–∑–≤–∞–ª —Ä–µ–∑–æ–Ω–∞–Ω—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.\n"
        f"üó£ –ú–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å, –Ω–æ —Å–∏—Ç—É–∞—Ü–∏—è —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è.\n\n"
        f"üî• 312   ‚ù§Ô∏è 142   üí¨ 76   üòÇ 24\n\n"
        f"üîó t.me/{CHANNEL_NICK.strip('@')}\n"
        "‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ"
    )

    image_url = await get_og_image(link) or await get_backup_image(title)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üëÅ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_NICK.strip('@')}")
            ]
        ]
    )
    return formatted_text, image_url, keyboard


    formatted_text = (
        f"<b>{title}</b>\n\n"
        f"üìç {annotation}\n"
        f"üí• –≠—Ç–æ—Ç —Ñ–∞–∫—Ç —É–∂–µ –≤—ã–∑–≤–∞–ª —Ä–µ–∑–æ–Ω–∞–Ω—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.\n"
        f"üó£ –ú–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å, –Ω–æ —Å–∏—Ç—É–∞—Ü–∏—è —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è.\n\n"
        f"üîπ t.me/{CHANNEL_NICK.strip('@')}"
    )

    image_url = await get_og_image(link) or await get_backup_image(title)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üëÅ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_NICK.strip('@')}")
            ]
        ]
    )
    return formatted_text, image_url, keyboard


    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –±–ª–æ–∫ –≤ –≤–∏–¥–µ –∞–±–∑–∞—Ü–µ–≤ —Å —ç–º–æ–¥–∑–∏
    formatted_text = (
        f"<b>{title}</b>\n\n"
        f"üìç {annotation}\n"
        f"üí• –≠—Ç–æ—Ç —Ñ–∞–∫—Ç —É–∂–µ –≤—ã–∑–≤–∞–ª —Ä–µ–∑–æ–Ω–∞–Ω—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.\n"
        f"üó£ –ú–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å, –Ω–æ —Å–∏—Ç—É–∞—Ü–∏—è —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è.\n\n"
        f"üîπ t.me/{CHANNEL_NICK.strip('@')}"
    )

    image_url = await get_og_image(link) or await get_backup_image(title)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üëÅ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_NICK.strip('@')}")
            ]
        ]
    )
    return formatted_text, image_url, keyboard


    text = (
        f"üì∞ <b>{title}</b>\n\n"
        f"üß† {annotation}\n\n"
        f"üëâ –ü–æ–¥—Ä–æ–±–Ω–µ–µ —á–∏—Ç–∞–π –≤ –∫–∞–Ω–∞–ª–µ: https://t.me/{CHANNEL_NICK.strip('@')}"
    )

    image_url = await get_og_image(link) or await get_backup_image(title)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üëÅ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_NICK.strip('@')}")
            ]
        ]
    )
    return text, image_url, keyboard


    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üëÅ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_NICK.strip('@')}")
            ]
        ]
    )
    return text, image_url, keyboard


    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üëÅ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_NICK.strip('@')}")
            ]
        ]
    )
    return text, image_url, keyboard

async def send_post(text, image_url, keyboard):
    bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
    for chat_id in CHAT_IDS:
        try:
            if chat_id.strip():
                if image_url:
                    await bot.send_photo(chat_id=chat_id.strip(), photo=image_url, caption=text, reply_markup=keyboard)
                else:
                    await bot.send_message(chat_id=chat_id.strip(), text=text, reply_markup=keyboard)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
    await bot.session.close()
